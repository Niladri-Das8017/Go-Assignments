// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: 06LibraryMgmt_GRPC/grpc/protoFile/lms.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LmsServiceClient is the client API for LmsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LmsServiceClient interface {
	//Create Book
	CreateBook(ctx context.Context, in *CreateBookReq, opts ...grpc.CallOption) (*CreateBookRes, error)
	//List All Books
	ListAllBooks(ctx context.Context, in *ListAllBooksReq, opts ...grpc.CallOption) (LmsService_ListAllBooksClient, error)
	//Search Books
	SearchBooks(ctx context.Context, in *SearchBooksReq, opts ...grpc.CallOption) (LmsService_SearchBooksClient, error)
	//Update Book
	UpdateBook(ctx context.Context, in *UpdateBookReq, opts ...grpc.CallOption) (*UpdateBookRes, error)
	//Delete Book
	DeleteBook(ctx context.Context, in *DeleteBookReq, opts ...grpc.CallOption) (*DeleteBookRes, error)
}

type lmsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLmsServiceClient(cc grpc.ClientConnInterface) LmsServiceClient {
	return &lmsServiceClient{cc}
}

func (c *lmsServiceClient) CreateBook(ctx context.Context, in *CreateBookReq, opts ...grpc.CallOption) (*CreateBookRes, error) {
	out := new(CreateBookRes)
	err := c.cc.Invoke(ctx, "/protoFile.LmsService/CreateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lmsServiceClient) ListAllBooks(ctx context.Context, in *ListAllBooksReq, opts ...grpc.CallOption) (LmsService_ListAllBooksClient, error) {
	stream, err := c.cc.NewStream(ctx, &LmsService_ServiceDesc.Streams[0], "/protoFile.LmsService/ListAllBooks", opts...)
	if err != nil {
		return nil, err
	}
	x := &lmsServiceListAllBooksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LmsService_ListAllBooksClient interface {
	Recv() (*ListAllBooksRes, error)
	grpc.ClientStream
}

type lmsServiceListAllBooksClient struct {
	grpc.ClientStream
}

func (x *lmsServiceListAllBooksClient) Recv() (*ListAllBooksRes, error) {
	m := new(ListAllBooksRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lmsServiceClient) SearchBooks(ctx context.Context, in *SearchBooksReq, opts ...grpc.CallOption) (LmsService_SearchBooksClient, error) {
	stream, err := c.cc.NewStream(ctx, &LmsService_ServiceDesc.Streams[1], "/protoFile.LmsService/SearchBooks", opts...)
	if err != nil {
		return nil, err
	}
	x := &lmsServiceSearchBooksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LmsService_SearchBooksClient interface {
	Recv() (*SearchBooksRes, error)
	grpc.ClientStream
}

type lmsServiceSearchBooksClient struct {
	grpc.ClientStream
}

func (x *lmsServiceSearchBooksClient) Recv() (*SearchBooksRes, error) {
	m := new(SearchBooksRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lmsServiceClient) UpdateBook(ctx context.Context, in *UpdateBookReq, opts ...grpc.CallOption) (*UpdateBookRes, error) {
	out := new(UpdateBookRes)
	err := c.cc.Invoke(ctx, "/protoFile.LmsService/UpdateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lmsServiceClient) DeleteBook(ctx context.Context, in *DeleteBookReq, opts ...grpc.CallOption) (*DeleteBookRes, error) {
	out := new(DeleteBookRes)
	err := c.cc.Invoke(ctx, "/protoFile.LmsService/DeleteBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LmsServiceServer is the server API for LmsService service.
// All implementations must embed UnimplementedLmsServiceServer
// for forward compatibility
type LmsServiceServer interface {
	//Create Book
	CreateBook(context.Context, *CreateBookReq) (*CreateBookRes, error)
	//List All Books
	ListAllBooks(*ListAllBooksReq, LmsService_ListAllBooksServer) error
	//Search Books
	SearchBooks(*SearchBooksReq, LmsService_SearchBooksServer) error
	//Update Book
	UpdateBook(context.Context, *UpdateBookReq) (*UpdateBookRes, error)
	//Delete Book
	DeleteBook(context.Context, *DeleteBookReq) (*DeleteBookRes, error)
	mustEmbedUnimplementedLmsServiceServer()
}

// UnimplementedLmsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLmsServiceServer struct {
}

func (UnimplementedLmsServiceServer) CreateBook(context.Context, *CreateBookReq) (*CreateBookRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (UnimplementedLmsServiceServer) ListAllBooks(*ListAllBooksReq, LmsService_ListAllBooksServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAllBooks not implemented")
}
func (UnimplementedLmsServiceServer) SearchBooks(*SearchBooksReq, LmsService_SearchBooksServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchBooks not implemented")
}
func (UnimplementedLmsServiceServer) UpdateBook(context.Context, *UpdateBookReq) (*UpdateBookRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBook not implemented")
}
func (UnimplementedLmsServiceServer) DeleteBook(context.Context, *DeleteBookReq) (*DeleteBookRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBook not implemented")
}
func (UnimplementedLmsServiceServer) mustEmbedUnimplementedLmsServiceServer() {}

// UnsafeLmsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LmsServiceServer will
// result in compilation errors.
type UnsafeLmsServiceServer interface {
	mustEmbedUnimplementedLmsServiceServer()
}

func RegisterLmsServiceServer(s grpc.ServiceRegistrar, srv LmsServiceServer) {
	s.RegisterService(&LmsService_ServiceDesc, srv)
}

func _LmsService_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LmsServiceServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoFile.LmsService/CreateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LmsServiceServer).CreateBook(ctx, req.(*CreateBookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LmsService_ListAllBooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAllBooksReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LmsServiceServer).ListAllBooks(m, &lmsServiceListAllBooksServer{stream})
}

type LmsService_ListAllBooksServer interface {
	Send(*ListAllBooksRes) error
	grpc.ServerStream
}

type lmsServiceListAllBooksServer struct {
	grpc.ServerStream
}

func (x *lmsServiceListAllBooksServer) Send(m *ListAllBooksRes) error {
	return x.ServerStream.SendMsg(m)
}

func _LmsService_SearchBooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchBooksReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LmsServiceServer).SearchBooks(m, &lmsServiceSearchBooksServer{stream})
}

type LmsService_SearchBooksServer interface {
	Send(*SearchBooksRes) error
	grpc.ServerStream
}

type lmsServiceSearchBooksServer struct {
	grpc.ServerStream
}

func (x *lmsServiceSearchBooksServer) Send(m *SearchBooksRes) error {
	return x.ServerStream.SendMsg(m)
}

func _LmsService_UpdateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LmsServiceServer).UpdateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoFile.LmsService/UpdateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LmsServiceServer).UpdateBook(ctx, req.(*UpdateBookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LmsService_DeleteBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LmsServiceServer).DeleteBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoFile.LmsService/DeleteBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LmsServiceServer).DeleteBook(ctx, req.(*DeleteBookReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LmsService_ServiceDesc is the grpc.ServiceDesc for LmsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LmsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protoFile.LmsService",
	HandlerType: (*LmsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBook",
			Handler:    _LmsService_CreateBook_Handler,
		},
		{
			MethodName: "UpdateBook",
			Handler:    _LmsService_UpdateBook_Handler,
		},
		{
			MethodName: "DeleteBook",
			Handler:    _LmsService_DeleteBook_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListAllBooks",
			Handler:       _LmsService_ListAllBooks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchBooks",
			Handler:       _LmsService_SearchBooks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "06LibraryMgmt_GRPC/grpc/protoFile/lms.proto",
}
